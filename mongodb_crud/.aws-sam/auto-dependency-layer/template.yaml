AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example CRUD
Parameters:
  IAMUsername:
    Description: Name of the IAM user who will be the administrator of the KMS key
      we create. This user will be able to encrypt values and manage the key.
    Type: String
Resources:
  SimpleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /dev/Database/MongoDB/DevUri
      Description: MongoDB Hostname
      Type: String
      Value: MongdbHostName
  ParameterDevEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ParameterStoreKeyDev
      TargetKeyId:
        Ref: ParameterStoreDevEncryptionKey
  ParameterStoreDevEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for secret config values for the Parameter Store
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Allow administration of the key & encryption of new values
          Effect: Allow
          Action:
          - kms:Create*
          - kms:Encrypt
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: '*'
          Principal:
            AWS:
            - Fn::Sub: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - ParameterStoreFunctionRoleDev
              - Arn
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: '*'
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Create
      Description: Lambda function Insert new Record into Database
      Role:
        Fn::GetAtt:
        - ParameterStoreFunctionRoleDev
        - Arn
      CodeUri: CreateFunction
      Handler: app.lambda_handler
      Layers:
      - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.CreateFunction286a02c8DepLayer
      Runtime: python3.8
      Architectures:
      - x86_64
      Environment:
        Variables:
          ENV: dev
          Db: Database/MongoDB/DevUri
          AWS_XRAY_TRACING_NAME: CreateFunctionDev
      Timeout: 5
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /Create
            Method: post
    Metadata:
      SamResourceId: CreateFunction
  ReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Read
      Description: Lambda function Read from Database
      Role:
        Fn::GetAtt:
        - ParameterStoreFunctionRoleDev
        - Arn
      CodeUri: ReadFunction
      Handler: app.lambda_handler
      Layers:
      - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ReadFunctionfe12730cDepLayer
      Runtime: python3.8
      Architectures:
      - x86_64
      Environment:
        Variables:
          ENV: dev
          Db: Database/MongoDB/DevUri
          AWS_XRAY_TRACING_NAME: ReadFunctionDev
      Timeout: 5
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /Read
            Method: get
    Metadata:
      SamResourceId: ReadFunction
  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Update
      Description: Lambda function Update Record in Database
      Role:
        Fn::GetAtt:
        - ParameterStoreFunctionRoleDev
        - Arn
      CodeUri: UpdateFunction
      Handler: app.lambda_handler
      Layers:
      - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.UpdateFunction4859cf9cDepLayer
      Runtime: python3.8
      Architectures:
      - x86_64
      Environment:
        Variables:
          ENV: dev
          Db: Database/MongoDB/DevUri
          AWS_XRAY_TRACING_NAME: UpdateFunctionDev
      Timeout: 5
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /Update
            Method: post
    Metadata:
      SamResourceId: UpdateFunction
  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Delete
      Description: Lambda function Delete record from Database
      Role:
        Fn::GetAtt:
        - ParameterStoreFunctionRoleDev
        - Arn
      CodeUri: DeleteFunction
      Handler: app.lambda_handler
      Layers:
      - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.DeleteFunction7027c8f1DepLayer
      Runtime: python3.8
      Architectures:
      - x86_64
      Environment:
        Variables:
          ENV: dev
          Db: Database/MongoDB/DevUri
          AWS_XRAY_TRACING_NAME: DeleteFunctionDev
      Timeout: 5
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /Delete
            Method: post
    Metadata:
      SamResourceId: DeleteFunction
  ParameterStoreFunctionRoleDev:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DevParameterAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter*
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
      - PolicyName: DevXRayAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'
  AwsSamAutoDependencyLayerNestedStack:
    DeletionPolicy: Delete
    Metadata:
      CreatedBy: AWS SAM CLI sync command
    Properties:
      TemplateURL: H:\Work\project\Serverless_CI-CD\mongodb_crud\.aws-sam\auto-dependency-layer\nested_template.yaml
    Type: AWS::CloudFormation::Stack
Outputs:
  CreateFunction:
    Description: Create Lambda Function ARN
    Value:
      Fn::GetAtt:
      - CreateFunction
      - Arn
  ReadFunction:
    Description: Read Lambda Function ARN
    Value:
      Fn::GetAtt:
      - ReadFunction
      - Arn
  UpdateFunction:
    Description: Update Lambda Function ARN
    Value:
      Fn::GetAtt:
      - UpdateFunction
      - Arn
  DeleteFunction:
    Description: Delete Lambda Function ARN
    Value:
      Fn::GetAtt:
      - DeleteFunction
      - Arn
