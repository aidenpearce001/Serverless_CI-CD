AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example CRUD

Parameters:
  LambdaVersion:
    Type: String
    Default: 1.0
  Enviroment:
    Type: String
    Default: Prod
  DbUri:
    Type: String
    Default: mongodb+srv:username:password@server.example.com/?connectTimeoutMS=300000&authSource=aDifferentAuthDB
  DbName:
    Type: String
    Default: SchoolManagement

Resources:
  SimpleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        ['',
          ['/', !Ref Enviroment, '/Database/MongoDBUri' ]
        ]
      Description: 'MongoDB Hostname'
      Type: String
      Value: !Ref DbUri

  ParameterDevEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: 'alias/ParameterStoreKeyDev'
      TargetKeyId: !Ref ParameterStoreDevEncryptionKey

  ParameterStoreDevEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'Encryption key for secret config values for the Parameter Store'
      Enabled: True
      EnableKeyRotation: False
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'key-default-1'
        Statement:
          -
            Sid: 'Allow administration of the key & encryption of new values'
            Effect: Allow
            Action:
              - 'kms:Create*'
              - 'kms:Encrypt'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
            Principal:
              AWS:
              - Fn::Sub: '*'
          -
            Sid: 'Allow use of the key'
            Effect: Allow
            Principal:
              AWS: !GetAtt ParameterStoreFunctionRoleDev.Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Enviroment
      
  StudentFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'Students'
      Description: 'Students CRUD'
      Role: !GetAtt ParameterStoreFunctionRoleDev.Arn
      CodeUri: CRUD/Student/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          ENV: 'dev'
          Db : !Join
            [ '', 
              [!Ref Enviroment, '/Database/MongoDBUri'] 
            ]
          DatabaseName: !Ref DbName
          CollectionName: Student
          AWS_XRAY_TRACING_NAME: 'StudentsFunction'
      Timeout: 5
      Events:
        ListStudent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Student
            Method: get
        GetStudent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Student/{id}
            Method: get
        CreateStudent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Create
            Method: post
        DeleteStudent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Student/{id}
            Method: delete
        UpdateStudent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Student/{id}
            Method: update

    AutoPublishAlias: live

  StudentFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref StudentFunction
      Description: v1.0

  StudentFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref StudentFunction
      FunctionVersion: !GetAtt StudentFunctionVersion.Version
      Name: !Ref Enviroment

  APIInvokePermission: 
    Type: 'AWS::Lambda::Permission'
    Properties: 
      FunctionName: 
        !Join
          [ '', 
              [!Ref StudentFunction, ':', !Ref Enviroment] 
          ]
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: 
        !Join
          [ '',
            ['arn:',!Ref AWS::Partition, ":execute-api:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":", !Ref ApiGatewayApi, "/", !Ref Enviroment, "/*/*/*"]
          ]
  ParameterStoreFunctionRoleDev:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        -
          PolicyName: 'DevParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
        -
          PolicyName: 'DevXRayAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                Resource: '*'

Outputs:
  CreateApi:
    Description: "API Gateway endpoint URL for Prod stage for Student function"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Enviroment}/Student"
  StudentFunction:
    Description: "Create Student Function ARN"
    Value: !GetAtt StudentFunction.Arn
