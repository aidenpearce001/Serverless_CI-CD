AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example CRUD

Parameters:
  LambdaVersion:
    Type: String
    Default: 1.0
  Enviroment:
    Type: String
    Default: Prod

Resources:
  SimpleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/dev/Database/MongoDB/DevUri'
      Description: 'MongoDB Hostname'
      Type: String
      Value: 'MongdbHostName'

  ParameterDevEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: 'alias/ParameterStoreKeyDev'
      TargetKeyId: !Ref ParameterStoreDevEncryptionKey

  ParameterStoreDevEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'Encryption key for secret config values for the Parameter Store'
      Enabled: True
      EnableKeyRotation: False
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'key-default-1'
        Statement:
          -
            Sid: 'Allow administration of the key & encryption of new values'
            Effect: Allow
            Action:
              - 'kms:Create*'
              - 'kms:Encrypt'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
            Principal:
              AWS:
              - Fn::Sub: '*'
          -
            Sid: 'Allow use of the key'
            Effect: Allow
            Principal:
              AWS: !GetAtt ParameterStoreFunctionRoleDev.Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Enviroment

  CreateFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'Create'
      Description: 'Lambda function Insert new Record into Database'
      Role: !GetAtt ParameterStoreFunctionRoleDev.Arn
      CodeUri: CRUD/Create/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          ENV: 'dev'
          Db : 'Database/MongoDB/DevUri'
          AWS_XRAY_TRACING_NAME: 'CreateFunctionDev'
      Timeout: 5
      Events:
        ProxyApiRoot:
          Type: Api 
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Create
            Method: post
      AutoPublishAlias: live
      VersionDescription: !Ref LambdaVersion

  ReadFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'Read'
      Description: 'Lambda function Read from Database'
      Role: !GetAtt ParameterStoreFunctionRoleDev.Arn
      CodeUri: CRUD/Read/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          ENV: 'dev'
          Db : 'Database/MongoDB/DevUri'
          AWS_XRAY_TRACING_NAME: 'ReadFunctionDev'
      Timeout: 5
      Events:
        ProxyApiRoot:
          Type: Api 
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Read
            Method: get
      AutoPublishAlias: live
      VersionDescription: !Ref LambdaVersion

  UpdateFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'Update'
      Description: 'Lambda function Update Record in Database'
      Role: !GetAtt ParameterStoreFunctionRoleDev.Arn
      CodeUri: CRUD/Update/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          ENV: 'dev'
          Db : 'Database/MongoDB/DevUri'
          AWS_XRAY_TRACING_NAME: 'UpdateFunctionDev'
      Timeout: 5
      Events:
        ProxyApiRoot:
          Type: Api 
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Update
            Method: post
      AutoPublishAlias: live
      VersionDescription: !Ref LambdaVersion
      
  DeleteFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'Delete'
      Description: 'Lambda function Delete record from Database'
      Role: !GetAtt ParameterStoreFunctionRoleDev.Arn
      CodeUri: CRUD/Delete/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-boto3:9
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          ENV: 'dev'
          Db : 'Database/MongoDB/DevUri'
          AWS_XRAY_TRACING_NAME: 'DeleteFunctionDev'
      Timeout: 5
      Events:
        ProxyApiRoot:
          Type: Api 
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /Delete
            Method: post
      AutoPublishAlias: live
      VersionDescription: !Ref LambdaVersion

  CreateAlias

  ParameterStoreFunctionRoleDev:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        -
          PolicyName: 'DevParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
        -
          PolicyName: 'CodeBuildAllowUpdateFunction'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'lambda:UpdateFunctionCode'
                Resource: '*'
        -
          PolicyName: 'DevXRayAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                Resource: '*'

Outputs:
  # CreateApi:
  #   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/*"
  CreateFunction:
    Description: "Create Lambda Function ARN"
    Value: !GetAtt CreateFunction.Arn
  ReadFunction:
    Description: "Read Lambda Function ARN"
    Value: !GetAtt ReadFunction.Arn
  UpdateFunction:
    Description: "Update Lambda Function ARN"
    Value: !GetAtt UpdateFunction.Arn
  DeleteFunction:
    Description: "Delete Lambda Function ARN"
    Value: !GetAtt DeleteFunction.Arn
